'use strict';

//all data types return true except number.

let isNumber = function(n){
    return !isNaN(parseFloat(n)) && isFinite(n) ;
};

let money,
    start = function () {
        do {
            money = prompt("–í–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥?", 60000);
        }
        while (isNaN(money) || money === null || money === "");
    };


start();

let appData = {
    budget: money,
    budgetDay: 0,
    budgetMonth: 0,
    expensesMonth: 0,
    income: {},
    addIncome: [],
    expenses: {},
    addExpenses: [],
    deposit: false,
    percentDeposit: 0,
    moneyDeposit: 0,
    mission: 30000,
    period: 3,
    asking: function () {
        if (confirm("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫?")) {
            let itemIncome,
                cashIncome;
            do {
                itemIncome = prompt("–ö–∞–∫–æ–π —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫?", "–¢–∞–∫—Å—É—é");
            }while (isNumber(itemIncome) || itemIncome === " " || itemIncome === "");


            do {
                cashIncome = prompt("–°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü –≤—ã –∑–∞—Ä–∞–≤–∞—Ç—ã–≤–∞–µ—Ç–µ –Ω–∞ —ç—Ç–æ–º?", 10000);
                appData.income[itemIncome] = cashIncome;
            } while (!isNumber(cashIncome));
        }


        let addExpenses = prompt("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é");

        addExpenses = addExpenses.split(",");

        appData.addExpenses = addExpenses.map(function(item){
            return item.trim().charAt(0).toUpperCase() +  item.trim().slice(1).toLowerCase()
        }).join(", ");

      

        appData.deposit = confirm("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–Ω–∫–µ?");

        for (let i = 0; i < 2; i++) {
            let title;
            do {
                title = prompt("–í–≤–µ–¥–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤?");
            } while (isNumber(title) || title === "" || title === " ");
            do {
                appData.expenses[title] = prompt("–í–æ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –æ–±–æ–π–¥–µ—Ç—Å—è?");

            } while (!isNumber(appData.expenses[title]));

        }

    },
    getExpensesMonth: function () {
        for (let key in appData.expenses) {
            appData.expensesMonth += +appData.expenses[key];
        }
    },
    getBudget: function () {
        appData.budgetMonth = appData.budget - appData.expensesMonth;
        appData.budgetDay = Math.floor(appData.budgetMonth / 30);
    },

    getTargetMonth: function () {
       return appData.mission / appData.budgetMonth;
    },
    getStatusIncome: function () {
        if (appData.budgetDay >= 1200) {
            console.log("–£ –≤–∞—Å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ ü§ë");
        } else if (appData.budgetDay >= 600 && appData.budgetDay < 1200) {
            console.log("–£ –≤–∞—Å —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ :wink:");
        } else if (appData.budgetDay >= 0 && appData.budgetDay < 600) {
            console.log("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ :sleepy:");
        } else {
            console.log("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê");
        }
    },
    getInfoDeposit: function(){
        if(appData.deposit){
            do {
                appData.percentDeposit = prompt("–ö–∞–∫–æ–π –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç?", "10");
            } while(!isNumber(appData.percentDeposit));

            do {
                appData.moneyDeposit = prompt("–ö–∞–∫–∞—è —Å—É–º–º–∞ –∑–∞–ª–æ–∂–µ–Ω–∞?", 10000);
            }while(!isNumber(appData.moneyDeposit))
        }
    },
    calcSavedMoney: function () {
         return appData.budgetMonth * appData.period;
    }

};     

appData.asking();

appData.getExpensesMonth();

appData.getBudget();

console.log("–°—É–º–º–∞ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: " + appData.expensesMonth  + " y.e.");

if (appData.expensesMonth >= 0) {
    console.log(`–í–∞—à–∞ —Ü–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∑–∞ : ` + Math.ceil(appData.getTargetMonth()) + ` –º–µ—Å.`);
} else {
    console.log("–í–∞—à–∞ —Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞");
}

appData.getStatusIncome();

for (let key in appData){
    console.log(`–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –¥–∞–Ω–Ω—ã–µ: + key + , –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ` + appData[key]);
}

appData.getInfoDeposit(
);


